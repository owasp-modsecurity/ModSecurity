// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waf_format.proto

#ifndef PROTOBUF_waf_5fformat_2eproto__INCLUDED
#define PROTOBUF_waf_5fformat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_waf_5fformat_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsDetailsImpl();
void InitDefaultsDetails();
void InitDefaultsPropertiesImpl();
void InitDefaultsProperties();
void InitDefaultsWaf_FormatImpl();
void InitDefaultsWaf_Format();
inline void InitDefaults() {
  InitDefaultsDetails();
  InitDefaultsProperties();
  InitDefaultsWaf_Format();
}
}  // namespace protobuf_waf_5fformat_2eproto
namespace waf_format {
class Details;
class DetailsDefaultTypeInternal;
extern DetailsDefaultTypeInternal _Details_default_instance_;
class Properties;
class PropertiesDefaultTypeInternal;
extern PropertiesDefaultTypeInternal _Properties_default_instance_;
class Waf_Format;
class Waf_FormatDefaultTypeInternal;
extern Waf_FormatDefaultTypeInternal _Waf_Format_default_instance_;
}  // namespace waf_format
namespace waf_format {

enum Properties_ActionType {
  Properties_ActionType_Detected = 0,
  Properties_ActionType_Blocked = 1
};
bool Properties_ActionType_IsValid(int value);
const Properties_ActionType Properties_ActionType_ActionType_MIN = Properties_ActionType_Detected;
const Properties_ActionType Properties_ActionType_ActionType_MAX = Properties_ActionType_Blocked;
const int Properties_ActionType_ActionType_ARRAYSIZE = Properties_ActionType_ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Properties_ActionType_descriptor();
inline const ::std::string& Properties_ActionType_Name(Properties_ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Properties_ActionType_descriptor(), value);
}
inline bool Properties_ActionType_Parse(
    const ::std::string& name, Properties_ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Properties_ActionType>(
    Properties_ActionType_descriptor(), name, value);
}
enum Properties_SiteType {
  Properties_SiteType_Global = 0
};
bool Properties_SiteType_IsValid(int value);
const Properties_SiteType Properties_SiteType_SiteType_MIN = Properties_SiteType_Global;
const Properties_SiteType Properties_SiteType_SiteType_MAX = Properties_SiteType_Global;
const int Properties_SiteType_SiteType_ARRAYSIZE = Properties_SiteType_SiteType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Properties_SiteType_descriptor();
inline const ::std::string& Properties_SiteType_Name(Properties_SiteType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Properties_SiteType_descriptor(), value);
}
inline bool Properties_SiteType_Parse(
    const ::std::string& name, Properties_SiteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Properties_SiteType>(
    Properties_SiteType_descriptor(), name, value);
}
// ===================================================================

class Details : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:waf_format.Details) */ {
 public:
  Details();
  virtual ~Details();

  Details(const Details& from);

  inline Details& operator=(const Details& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Details(Details&& from) noexcept
    : Details() {
    *this = ::std::move(from);
  }

  inline Details& operator=(Details&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Details& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Details* internal_default_instance() {
    return reinterpret_cast<const Details*>(
               &_Details_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Details* other);
  friend void swap(Details& a, Details& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Details* New() const PROTOBUF_FINAL { return New(NULL); }

  Details* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Details& from);
  void MergeFrom(const Details& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Details* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional string data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string file = 3;
  bool has_file() const;
  void clear_file();
  static const int kFileFieldNumber = 3;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // optional string line = 4;
  bool has_line() const;
  void clear_line();
  static const int kLineFieldNumber = 4;
  const ::std::string& line() const;
  void set_line(const ::std::string& value);
  #if LANG_CXX11
  void set_line(::std::string&& value);
  #endif
  void set_line(const char* value);
  void set_line(const char* value, size_t size);
  ::std::string* mutable_line();
  ::std::string* release_line();
  void set_allocated_line(::std::string* line);

  // @@protoc_insertion_point(class_scope:waf_format.Details)
 private:
  void set_has_message();
  void clear_has_message();
  void set_has_data();
  void clear_has_data();
  void set_has_file();
  void clear_has_file();
  void set_has_line();
  void clear_has_line();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::google::protobuf::internal::ArenaStringPtr line_;
  friend struct ::protobuf_waf_5fformat_2eproto::TableStruct;
  friend void ::protobuf_waf_5fformat_2eproto::InitDefaultsDetailsImpl();
};
// -------------------------------------------------------------------

class Properties : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:waf_format.Properties) */ {
 public:
  Properties();
  virtual ~Properties();

  Properties(const Properties& from);

  inline Properties& operator=(const Properties& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Properties(Properties&& from) noexcept
    : Properties() {
    *this = ::std::move(from);
  }

  inline Properties& operator=(Properties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Properties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Properties* internal_default_instance() {
    return reinterpret_cast<const Properties*>(
               &_Properties_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Properties* other);
  friend void swap(Properties& a, Properties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Properties* New() const PROTOBUF_FINAL { return New(NULL); }

  Properties* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Properties& from);
  void MergeFrom(const Properties& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Properties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Properties_ActionType ActionType;
  static const ActionType Detected =
    Properties_ActionType_Detected;
  static const ActionType Blocked =
    Properties_ActionType_Blocked;
  static inline bool ActionType_IsValid(int value) {
    return Properties_ActionType_IsValid(value);
  }
  static const ActionType ActionType_MIN =
    Properties_ActionType_ActionType_MIN;
  static const ActionType ActionType_MAX =
    Properties_ActionType_ActionType_MAX;
  static const int ActionType_ARRAYSIZE =
    Properties_ActionType_ActionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActionType_descriptor() {
    return Properties_ActionType_descriptor();
  }
  static inline const ::std::string& ActionType_Name(ActionType value) {
    return Properties_ActionType_Name(value);
  }
  static inline bool ActionType_Parse(const ::std::string& name,
      ActionType* value) {
    return Properties_ActionType_Parse(name, value);
  }

  typedef Properties_SiteType SiteType;
  static const SiteType Global =
    Properties_SiteType_Global;
  static inline bool SiteType_IsValid(int value) {
    return Properties_SiteType_IsValid(value);
  }
  static const SiteType SiteType_MIN =
    Properties_SiteType_SiteType_MIN;
  static const SiteType SiteType_MAX =
    Properties_SiteType_SiteType_MAX;
  static const int SiteType_ARRAYSIZE =
    Properties_SiteType_SiteType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SiteType_descriptor() {
    return Properties_SiteType_descriptor();
  }
  static inline const ::std::string& SiteType_Name(SiteType value) {
    return Properties_SiteType_Name(value);
  }
  static inline bool SiteType_Parse(const ::std::string& name,
      SiteType* value) {
    return Properties_SiteType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string instanceId = 1;
  bool has_instanceid() const;
  void clear_instanceid();
  static const int kInstanceIdFieldNumber = 1;
  const ::std::string& instanceid() const;
  void set_instanceid(const ::std::string& value);
  #if LANG_CXX11
  void set_instanceid(::std::string&& value);
  #endif
  void set_instanceid(const char* value);
  void set_instanceid(const char* value, size_t size);
  ::std::string* mutable_instanceid();
  ::std::string* release_instanceid();
  void set_allocated_instanceid(::std::string* instanceid);

  // optional string clientIp = 2;
  bool has_clientip() const;
  void clear_clientip();
  static const int kClientIpFieldNumber = 2;
  const ::std::string& clientip() const;
  void set_clientip(const ::std::string& value);
  #if LANG_CXX11
  void set_clientip(::std::string&& value);
  #endif
  void set_clientip(const char* value);
  void set_clientip(const char* value, size_t size);
  ::std::string* mutable_clientip();
  ::std::string* release_clientip();
  void set_allocated_clientip(::std::string* clientip);

  // optional string clientPort = 3;
  bool has_clientport() const;
  void clear_clientport();
  static const int kClientPortFieldNumber = 3;
  const ::std::string& clientport() const;
  void set_clientport(const ::std::string& value);
  #if LANG_CXX11
  void set_clientport(::std::string&& value);
  #endif
  void set_clientport(const char* value);
  void set_clientport(const char* value, size_t size);
  ::std::string* mutable_clientport();
  ::std::string* release_clientport();
  void set_allocated_clientport(::std::string* clientport);

  // optional string requestUri = 4;
  bool has_requesturi() const;
  void clear_requesturi();
  static const int kRequestUriFieldNumber = 4;
  const ::std::string& requesturi() const;
  void set_requesturi(const ::std::string& value);
  #if LANG_CXX11
  void set_requesturi(::std::string&& value);
  #endif
  void set_requesturi(const char* value);
  void set_requesturi(const char* value, size_t size);
  ::std::string* mutable_requesturi();
  ::std::string* release_requesturi();
  void set_allocated_requesturi(::std::string* requesturi);

  // optional string ruleSetType = 5;
  bool has_rulesettype() const;
  void clear_rulesettype();
  static const int kRuleSetTypeFieldNumber = 5;
  const ::std::string& rulesettype() const;
  void set_rulesettype(const ::std::string& value);
  #if LANG_CXX11
  void set_rulesettype(::std::string&& value);
  #endif
  void set_rulesettype(const char* value);
  void set_rulesettype(const char* value, size_t size);
  ::std::string* mutable_rulesettype();
  ::std::string* release_rulesettype();
  void set_allocated_rulesettype(::std::string* rulesettype);

  // optional string ruleSetVersion = 6;
  bool has_rulesetversion() const;
  void clear_rulesetversion();
  static const int kRuleSetVersionFieldNumber = 6;
  const ::std::string& rulesetversion() const;
  void set_rulesetversion(const ::std::string& value);
  #if LANG_CXX11
  void set_rulesetversion(::std::string&& value);
  #endif
  void set_rulesetversion(const char* value);
  void set_rulesetversion(const char* value, size_t size);
  ::std::string* mutable_rulesetversion();
  ::std::string* release_rulesetversion();
  void set_allocated_rulesetversion(::std::string* rulesetversion);

  // optional string ruleId = 7;
  bool has_ruleid() const;
  void clear_ruleid();
  static const int kRuleIdFieldNumber = 7;
  const ::std::string& ruleid() const;
  void set_ruleid(const ::std::string& value);
  #if LANG_CXX11
  void set_ruleid(::std::string&& value);
  #endif
  void set_ruleid(const char* value);
  void set_ruleid(const char* value, size_t size);
  ::std::string* mutable_ruleid();
  ::std::string* release_ruleid();
  void set_allocated_ruleid(::std::string* ruleid);

  // optional string message = 8;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 8;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional string hostname = 12;
  bool has_hostname() const;
  void clear_hostname();
  static const int kHostnameFieldNumber = 12;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostname(::std::string&& value);
  #endif
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // optional .waf_format.Details details = 11;
  bool has_details() const;
  void clear_details();
  static const int kDetailsFieldNumber = 11;
  const ::waf_format::Details& details() const;
  ::waf_format::Details* release_details();
  ::waf_format::Details* mutable_details();
  void set_allocated_details(::waf_format::Details* details);

  // optional .waf_format.Properties.ActionType action = 9;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 9;
  ::waf_format::Properties_ActionType action() const;
  void set_action(::waf_format::Properties_ActionType value);

  // optional .waf_format.Properties.SiteType site = 10;
  bool has_site() const;
  void clear_site();
  static const int kSiteFieldNumber = 10;
  ::waf_format::Properties_SiteType site() const;
  void set_site(::waf_format::Properties_SiteType value);

  // @@protoc_insertion_point(class_scope:waf_format.Properties)
 private:
  void set_has_instanceid();
  void clear_has_instanceid();
  void set_has_clientip();
  void clear_has_clientip();
  void set_has_clientport();
  void clear_has_clientport();
  void set_has_requesturi();
  void clear_has_requesturi();
  void set_has_rulesettype();
  void clear_has_rulesettype();
  void set_has_rulesetversion();
  void clear_has_rulesetversion();
  void set_has_ruleid();
  void clear_has_ruleid();
  void set_has_message();
  void clear_has_message();
  void set_has_action();
  void clear_has_action();
  void set_has_site();
  void clear_has_site();
  void set_has_details();
  void clear_has_details();
  void set_has_hostname();
  void clear_has_hostname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr instanceid_;
  ::google::protobuf::internal::ArenaStringPtr clientip_;
  ::google::protobuf::internal::ArenaStringPtr clientport_;
  ::google::protobuf::internal::ArenaStringPtr requesturi_;
  ::google::protobuf::internal::ArenaStringPtr rulesettype_;
  ::google::protobuf::internal::ArenaStringPtr rulesetversion_;
  ::google::protobuf::internal::ArenaStringPtr ruleid_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::waf_format::Details* details_;
  int action_;
  int site_;
  friend struct ::protobuf_waf_5fformat_2eproto::TableStruct;
  friend void ::protobuf_waf_5fformat_2eproto::InitDefaultsPropertiesImpl();
};
// -------------------------------------------------------------------

class Waf_Format : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:waf_format.Waf_Format) */ {
 public:
  Waf_Format();
  virtual ~Waf_Format();

  Waf_Format(const Waf_Format& from);

  inline Waf_Format& operator=(const Waf_Format& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Waf_Format(Waf_Format&& from) noexcept
    : Waf_Format() {
    *this = ::std::move(from);
  }

  inline Waf_Format& operator=(Waf_Format&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Waf_Format& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Waf_Format* internal_default_instance() {
    return reinterpret_cast<const Waf_Format*>(
               &_Waf_Format_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Waf_Format* other);
  friend void swap(Waf_Format& a, Waf_Format& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Waf_Format* New() const PROTOBUF_FINAL { return New(NULL); }

  Waf_Format* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Waf_Format& from);
  void MergeFrom(const Waf_Format& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Waf_Format* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string resourceId = 1;
  bool has_resourceid() const;
  void clear_resourceid();
  static const int kResourceIdFieldNumber = 1;
  const ::std::string& resourceid() const;
  void set_resourceid(const ::std::string& value);
  #if LANG_CXX11
  void set_resourceid(::std::string&& value);
  #endif
  void set_resourceid(const char* value);
  void set_resourceid(const char* value, size_t size);
  ::std::string* mutable_resourceid();
  ::std::string* release_resourceid();
  void set_allocated_resourceid(::std::string* resourceid);

  // optional string operationName = 2;
  bool has_operationname() const;
  void clear_operationname();
  static const int kOperationNameFieldNumber = 2;
  const ::std::string& operationname() const;
  void set_operationname(const ::std::string& value);
  #if LANG_CXX11
  void set_operationname(::std::string&& value);
  #endif
  void set_operationname(const char* value);
  void set_operationname(const char* value, size_t size);
  ::std::string* mutable_operationname();
  ::std::string* release_operationname();
  void set_allocated_operationname(::std::string* operationname);

  // optional string category = 3;
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 3;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // optional .waf_format.Properties properties = 4;
  bool has_properties() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 4;
  const ::waf_format::Properties& properties() const;
  ::waf_format::Properties* release_properties();
  ::waf_format::Properties* mutable_properties();
  void set_allocated_properties(::waf_format::Properties* properties);

  // @@protoc_insertion_point(class_scope:waf_format.Waf_Format)
 private:
  void set_has_resourceid();
  void clear_has_resourceid();
  void set_has_operationname();
  void clear_has_operationname();
  void set_has_category();
  void clear_has_category();
  void set_has_properties();
  void clear_has_properties();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr resourceid_;
  ::google::protobuf::internal::ArenaStringPtr operationname_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::waf_format::Properties* properties_;
  friend struct ::protobuf_waf_5fformat_2eproto::TableStruct;
  friend void ::protobuf_waf_5fformat_2eproto::InitDefaultsWaf_FormatImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Details

// optional string message = 1;
inline bool Details::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Details::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Details::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Details::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& Details::message() const {
  // @@protoc_insertion_point(field_get:waf_format.Details.message)
  return message_.GetNoArena();
}
inline void Details::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waf_format.Details.message)
}
#if LANG_CXX11
inline void Details::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waf_format.Details.message)
}
#endif
inline void Details::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waf_format.Details.message)
}
inline void Details::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waf_format.Details.message)
}
inline ::std::string* Details::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:waf_format.Details.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Details::release_message() {
  // @@protoc_insertion_point(field_release:waf_format.Details.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Details::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:waf_format.Details.message)
}

// optional string data = 2;
inline bool Details::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Details::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Details::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Details::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Details::data() const {
  // @@protoc_insertion_point(field_get:waf_format.Details.data)
  return data_.GetNoArena();
}
inline void Details::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waf_format.Details.data)
}
#if LANG_CXX11
inline void Details::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waf_format.Details.data)
}
#endif
inline void Details::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waf_format.Details.data)
}
inline void Details::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waf_format.Details.data)
}
inline ::std::string* Details::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:waf_format.Details.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Details::release_data() {
  // @@protoc_insertion_point(field_release:waf_format.Details.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Details::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:waf_format.Details.data)
}

// optional string file = 3;
inline bool Details::has_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Details::set_has_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Details::clear_has_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Details::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file();
}
inline const ::std::string& Details::file() const {
  // @@protoc_insertion_point(field_get:waf_format.Details.file)
  return file_.GetNoArena();
}
inline void Details::set_file(const ::std::string& value) {
  set_has_file();
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waf_format.Details.file)
}
#if LANG_CXX11
inline void Details::set_file(::std::string&& value) {
  set_has_file();
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waf_format.Details.file)
}
#endif
inline void Details::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file();
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waf_format.Details.file)
}
inline void Details::set_file(const char* value, size_t size) {
  set_has_file();
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waf_format.Details.file)
}
inline ::std::string* Details::mutable_file() {
  set_has_file();
  // @@protoc_insertion_point(field_mutable:waf_format.Details.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Details::release_file() {
  // @@protoc_insertion_point(field_release:waf_format.Details.file)
  clear_has_file();
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Details::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    set_has_file();
  } else {
    clear_has_file();
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:waf_format.Details.file)
}

// optional string line = 4;
inline bool Details::has_line() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Details::set_has_line() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Details::clear_has_line() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Details::clear_line() {
  line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_line();
}
inline const ::std::string& Details::line() const {
  // @@protoc_insertion_point(field_get:waf_format.Details.line)
  return line_.GetNoArena();
}
inline void Details::set_line(const ::std::string& value) {
  set_has_line();
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waf_format.Details.line)
}
#if LANG_CXX11
inline void Details::set_line(::std::string&& value) {
  set_has_line();
  line_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waf_format.Details.line)
}
#endif
inline void Details::set_line(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_line();
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waf_format.Details.line)
}
inline void Details::set_line(const char* value, size_t size) {
  set_has_line();
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waf_format.Details.line)
}
inline ::std::string* Details::mutable_line() {
  set_has_line();
  // @@protoc_insertion_point(field_mutable:waf_format.Details.line)
  return line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Details::release_line() {
  // @@protoc_insertion_point(field_release:waf_format.Details.line)
  clear_has_line();
  return line_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Details::set_allocated_line(::std::string* line) {
  if (line != NULL) {
    set_has_line();
  } else {
    clear_has_line();
  }
  line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line);
  // @@protoc_insertion_point(field_set_allocated:waf_format.Details.line)
}

// -------------------------------------------------------------------

// Properties

// optional string instanceId = 1;
inline bool Properties::has_instanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Properties::set_has_instanceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Properties::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Properties::clear_instanceid() {
  instanceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instanceid();
}
inline const ::std::string& Properties::instanceid() const {
  // @@protoc_insertion_point(field_get:waf_format.Properties.instanceId)
  return instanceid_.GetNoArena();
}
inline void Properties::set_instanceid(const ::std::string& value) {
  set_has_instanceid();
  instanceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waf_format.Properties.instanceId)
}
#if LANG_CXX11
inline void Properties::set_instanceid(::std::string&& value) {
  set_has_instanceid();
  instanceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waf_format.Properties.instanceId)
}
#endif
inline void Properties::set_instanceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_instanceid();
  instanceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waf_format.Properties.instanceId)
}
inline void Properties::set_instanceid(const char* value, size_t size) {
  set_has_instanceid();
  instanceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waf_format.Properties.instanceId)
}
inline ::std::string* Properties::mutable_instanceid() {
  set_has_instanceid();
  // @@protoc_insertion_point(field_mutable:waf_format.Properties.instanceId)
  return instanceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Properties::release_instanceid() {
  // @@protoc_insertion_point(field_release:waf_format.Properties.instanceId)
  clear_has_instanceid();
  return instanceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Properties::set_allocated_instanceid(::std::string* instanceid) {
  if (instanceid != NULL) {
    set_has_instanceid();
  } else {
    clear_has_instanceid();
  }
  instanceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instanceid);
  // @@protoc_insertion_point(field_set_allocated:waf_format.Properties.instanceId)
}

// optional string clientIp = 2;
inline bool Properties::has_clientip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Properties::set_has_clientip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Properties::clear_has_clientip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Properties::clear_clientip() {
  clientip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientip();
}
inline const ::std::string& Properties::clientip() const {
  // @@protoc_insertion_point(field_get:waf_format.Properties.clientIp)
  return clientip_.GetNoArena();
}
inline void Properties::set_clientip(const ::std::string& value) {
  set_has_clientip();
  clientip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waf_format.Properties.clientIp)
}
#if LANG_CXX11
inline void Properties::set_clientip(::std::string&& value) {
  set_has_clientip();
  clientip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waf_format.Properties.clientIp)
}
#endif
inline void Properties::set_clientip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientip();
  clientip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waf_format.Properties.clientIp)
}
inline void Properties::set_clientip(const char* value, size_t size) {
  set_has_clientip();
  clientip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waf_format.Properties.clientIp)
}
inline ::std::string* Properties::mutable_clientip() {
  set_has_clientip();
  // @@protoc_insertion_point(field_mutable:waf_format.Properties.clientIp)
  return clientip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Properties::release_clientip() {
  // @@protoc_insertion_point(field_release:waf_format.Properties.clientIp)
  clear_has_clientip();
  return clientip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Properties::set_allocated_clientip(::std::string* clientip) {
  if (clientip != NULL) {
    set_has_clientip();
  } else {
    clear_has_clientip();
  }
  clientip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientip);
  // @@protoc_insertion_point(field_set_allocated:waf_format.Properties.clientIp)
}

// optional string clientPort = 3;
inline bool Properties::has_clientport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Properties::set_has_clientport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Properties::clear_has_clientport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Properties::clear_clientport() {
  clientport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientport();
}
inline const ::std::string& Properties::clientport() const {
  // @@protoc_insertion_point(field_get:waf_format.Properties.clientPort)
  return clientport_.GetNoArena();
}
inline void Properties::set_clientport(const ::std::string& value) {
  set_has_clientport();
  clientport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waf_format.Properties.clientPort)
}
#if LANG_CXX11
inline void Properties::set_clientport(::std::string&& value) {
  set_has_clientport();
  clientport_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waf_format.Properties.clientPort)
}
#endif
inline void Properties::set_clientport(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientport();
  clientport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waf_format.Properties.clientPort)
}
inline void Properties::set_clientport(const char* value, size_t size) {
  set_has_clientport();
  clientport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waf_format.Properties.clientPort)
}
inline ::std::string* Properties::mutable_clientport() {
  set_has_clientport();
  // @@protoc_insertion_point(field_mutable:waf_format.Properties.clientPort)
  return clientport_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Properties::release_clientport() {
  // @@protoc_insertion_point(field_release:waf_format.Properties.clientPort)
  clear_has_clientport();
  return clientport_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Properties::set_allocated_clientport(::std::string* clientport) {
  if (clientport != NULL) {
    set_has_clientport();
  } else {
    clear_has_clientport();
  }
  clientport_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientport);
  // @@protoc_insertion_point(field_set_allocated:waf_format.Properties.clientPort)
}

// optional string requestUri = 4;
inline bool Properties::has_requesturi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Properties::set_has_requesturi() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Properties::clear_has_requesturi() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Properties::clear_requesturi() {
  requesturi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_requesturi();
}
inline const ::std::string& Properties::requesturi() const {
  // @@protoc_insertion_point(field_get:waf_format.Properties.requestUri)
  return requesturi_.GetNoArena();
}
inline void Properties::set_requesturi(const ::std::string& value) {
  set_has_requesturi();
  requesturi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waf_format.Properties.requestUri)
}
#if LANG_CXX11
inline void Properties::set_requesturi(::std::string&& value) {
  set_has_requesturi();
  requesturi_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waf_format.Properties.requestUri)
}
#endif
inline void Properties::set_requesturi(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_requesturi();
  requesturi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waf_format.Properties.requestUri)
}
inline void Properties::set_requesturi(const char* value, size_t size) {
  set_has_requesturi();
  requesturi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waf_format.Properties.requestUri)
}
inline ::std::string* Properties::mutable_requesturi() {
  set_has_requesturi();
  // @@protoc_insertion_point(field_mutable:waf_format.Properties.requestUri)
  return requesturi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Properties::release_requesturi() {
  // @@protoc_insertion_point(field_release:waf_format.Properties.requestUri)
  clear_has_requesturi();
  return requesturi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Properties::set_allocated_requesturi(::std::string* requesturi) {
  if (requesturi != NULL) {
    set_has_requesturi();
  } else {
    clear_has_requesturi();
  }
  requesturi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requesturi);
  // @@protoc_insertion_point(field_set_allocated:waf_format.Properties.requestUri)
}

// optional string ruleSetType = 5;
inline bool Properties::has_rulesettype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Properties::set_has_rulesettype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Properties::clear_has_rulesettype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Properties::clear_rulesettype() {
  rulesettype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rulesettype();
}
inline const ::std::string& Properties::rulesettype() const {
  // @@protoc_insertion_point(field_get:waf_format.Properties.ruleSetType)
  return rulesettype_.GetNoArena();
}
inline void Properties::set_rulesettype(const ::std::string& value) {
  set_has_rulesettype();
  rulesettype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waf_format.Properties.ruleSetType)
}
#if LANG_CXX11
inline void Properties::set_rulesettype(::std::string&& value) {
  set_has_rulesettype();
  rulesettype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waf_format.Properties.ruleSetType)
}
#endif
inline void Properties::set_rulesettype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rulesettype();
  rulesettype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waf_format.Properties.ruleSetType)
}
inline void Properties::set_rulesettype(const char* value, size_t size) {
  set_has_rulesettype();
  rulesettype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waf_format.Properties.ruleSetType)
}
inline ::std::string* Properties::mutable_rulesettype() {
  set_has_rulesettype();
  // @@protoc_insertion_point(field_mutable:waf_format.Properties.ruleSetType)
  return rulesettype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Properties::release_rulesettype() {
  // @@protoc_insertion_point(field_release:waf_format.Properties.ruleSetType)
  clear_has_rulesettype();
  return rulesettype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Properties::set_allocated_rulesettype(::std::string* rulesettype) {
  if (rulesettype != NULL) {
    set_has_rulesettype();
  } else {
    clear_has_rulesettype();
  }
  rulesettype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rulesettype);
  // @@protoc_insertion_point(field_set_allocated:waf_format.Properties.ruleSetType)
}

// optional string ruleSetVersion = 6;
inline bool Properties::has_rulesetversion() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Properties::set_has_rulesetversion() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Properties::clear_has_rulesetversion() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Properties::clear_rulesetversion() {
  rulesetversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rulesetversion();
}
inline const ::std::string& Properties::rulesetversion() const {
  // @@protoc_insertion_point(field_get:waf_format.Properties.ruleSetVersion)
  return rulesetversion_.GetNoArena();
}
inline void Properties::set_rulesetversion(const ::std::string& value) {
  set_has_rulesetversion();
  rulesetversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waf_format.Properties.ruleSetVersion)
}
#if LANG_CXX11
inline void Properties::set_rulesetversion(::std::string&& value) {
  set_has_rulesetversion();
  rulesetversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waf_format.Properties.ruleSetVersion)
}
#endif
inline void Properties::set_rulesetversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rulesetversion();
  rulesetversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waf_format.Properties.ruleSetVersion)
}
inline void Properties::set_rulesetversion(const char* value, size_t size) {
  set_has_rulesetversion();
  rulesetversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waf_format.Properties.ruleSetVersion)
}
inline ::std::string* Properties::mutable_rulesetversion() {
  set_has_rulesetversion();
  // @@protoc_insertion_point(field_mutable:waf_format.Properties.ruleSetVersion)
  return rulesetversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Properties::release_rulesetversion() {
  // @@protoc_insertion_point(field_release:waf_format.Properties.ruleSetVersion)
  clear_has_rulesetversion();
  return rulesetversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Properties::set_allocated_rulesetversion(::std::string* rulesetversion) {
  if (rulesetversion != NULL) {
    set_has_rulesetversion();
  } else {
    clear_has_rulesetversion();
  }
  rulesetversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rulesetversion);
  // @@protoc_insertion_point(field_set_allocated:waf_format.Properties.ruleSetVersion)
}

// optional string ruleId = 7;
inline bool Properties::has_ruleid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Properties::set_has_ruleid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Properties::clear_has_ruleid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Properties::clear_ruleid() {
  ruleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ruleid();
}
inline const ::std::string& Properties::ruleid() const {
  // @@protoc_insertion_point(field_get:waf_format.Properties.ruleId)
  return ruleid_.GetNoArena();
}
inline void Properties::set_ruleid(const ::std::string& value) {
  set_has_ruleid();
  ruleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waf_format.Properties.ruleId)
}
#if LANG_CXX11
inline void Properties::set_ruleid(::std::string&& value) {
  set_has_ruleid();
  ruleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waf_format.Properties.ruleId)
}
#endif
inline void Properties::set_ruleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ruleid();
  ruleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waf_format.Properties.ruleId)
}
inline void Properties::set_ruleid(const char* value, size_t size) {
  set_has_ruleid();
  ruleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waf_format.Properties.ruleId)
}
inline ::std::string* Properties::mutable_ruleid() {
  set_has_ruleid();
  // @@protoc_insertion_point(field_mutable:waf_format.Properties.ruleId)
  return ruleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Properties::release_ruleid() {
  // @@protoc_insertion_point(field_release:waf_format.Properties.ruleId)
  clear_has_ruleid();
  return ruleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Properties::set_allocated_ruleid(::std::string* ruleid) {
  if (ruleid != NULL) {
    set_has_ruleid();
  } else {
    clear_has_ruleid();
  }
  ruleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ruleid);
  // @@protoc_insertion_point(field_set_allocated:waf_format.Properties.ruleId)
}

// optional string message = 8;
inline bool Properties::has_message() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Properties::set_has_message() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Properties::clear_has_message() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Properties::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& Properties::message() const {
  // @@protoc_insertion_point(field_get:waf_format.Properties.message)
  return message_.GetNoArena();
}
inline void Properties::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waf_format.Properties.message)
}
#if LANG_CXX11
inline void Properties::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waf_format.Properties.message)
}
#endif
inline void Properties::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waf_format.Properties.message)
}
inline void Properties::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waf_format.Properties.message)
}
inline ::std::string* Properties::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:waf_format.Properties.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Properties::release_message() {
  // @@protoc_insertion_point(field_release:waf_format.Properties.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Properties::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:waf_format.Properties.message)
}

// optional .waf_format.Properties.ActionType action = 9;
inline bool Properties::has_action() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Properties::set_has_action() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Properties::clear_has_action() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Properties::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::waf_format::Properties_ActionType Properties::action() const {
  // @@protoc_insertion_point(field_get:waf_format.Properties.action)
  return static_cast< ::waf_format::Properties_ActionType >(action_);
}
inline void Properties::set_action(::waf_format::Properties_ActionType value) {
  assert(::waf_format::Properties_ActionType_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:waf_format.Properties.action)
}

// optional .waf_format.Properties.SiteType site = 10;
inline bool Properties::has_site() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Properties::set_has_site() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Properties::clear_has_site() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Properties::clear_site() {
  site_ = 0;
  clear_has_site();
}
inline ::waf_format::Properties_SiteType Properties::site() const {
  // @@protoc_insertion_point(field_get:waf_format.Properties.site)
  return static_cast< ::waf_format::Properties_SiteType >(site_);
}
inline void Properties::set_site(::waf_format::Properties_SiteType value) {
  assert(::waf_format::Properties_SiteType_IsValid(value));
  set_has_site();
  site_ = value;
  // @@protoc_insertion_point(field_set:waf_format.Properties.site)
}

// optional .waf_format.Details details = 11;
inline bool Properties::has_details() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Properties::set_has_details() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Properties::clear_has_details() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Properties::clear_details() {
  if (details_ != NULL) details_->Clear();
  clear_has_details();
}
inline const ::waf_format::Details& Properties::details() const {
  const ::waf_format::Details* p = details_;
  // @@protoc_insertion_point(field_get:waf_format.Properties.details)
  return p != NULL ? *p : *reinterpret_cast<const ::waf_format::Details*>(
      &::waf_format::_Details_default_instance_);
}
inline ::waf_format::Details* Properties::release_details() {
  // @@protoc_insertion_point(field_release:waf_format.Properties.details)
  clear_has_details();
  ::waf_format::Details* temp = details_;
  details_ = NULL;
  return temp;
}
inline ::waf_format::Details* Properties::mutable_details() {
  set_has_details();
  if (details_ == NULL) {
    details_ = new ::waf_format::Details;
  }
  // @@protoc_insertion_point(field_mutable:waf_format.Properties.details)
  return details_;
}
inline void Properties::set_allocated_details(::waf_format::Details* details) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete details_;
  }
  if (details) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      details = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    set_has_details();
  } else {
    clear_has_details();
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:waf_format.Properties.details)
}

// optional string hostname = 12;
inline bool Properties::has_hostname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Properties::set_has_hostname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Properties::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Properties::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
inline const ::std::string& Properties::hostname() const {
  // @@protoc_insertion_point(field_get:waf_format.Properties.hostname)
  return hostname_.GetNoArena();
}
inline void Properties::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waf_format.Properties.hostname)
}
#if LANG_CXX11
inline void Properties::set_hostname(::std::string&& value) {
  set_has_hostname();
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waf_format.Properties.hostname)
}
#endif
inline void Properties::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waf_format.Properties.hostname)
}
inline void Properties::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waf_format.Properties.hostname)
}
inline ::std::string* Properties::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:waf_format.Properties.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Properties::release_hostname() {
  // @@protoc_insertion_point(field_release:waf_format.Properties.hostname)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Properties::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:waf_format.Properties.hostname)
}

// -------------------------------------------------------------------

// Waf_Format

// optional string resourceId = 1;
inline bool Waf_Format::has_resourceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Waf_Format::set_has_resourceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Waf_Format::clear_has_resourceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Waf_Format::clear_resourceid() {
  resourceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resourceid();
}
inline const ::std::string& Waf_Format::resourceid() const {
  // @@protoc_insertion_point(field_get:waf_format.Waf_Format.resourceId)
  return resourceid_.GetNoArena();
}
inline void Waf_Format::set_resourceid(const ::std::string& value) {
  set_has_resourceid();
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waf_format.Waf_Format.resourceId)
}
#if LANG_CXX11
inline void Waf_Format::set_resourceid(::std::string&& value) {
  set_has_resourceid();
  resourceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waf_format.Waf_Format.resourceId)
}
#endif
inline void Waf_Format::set_resourceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_resourceid();
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waf_format.Waf_Format.resourceId)
}
inline void Waf_Format::set_resourceid(const char* value, size_t size) {
  set_has_resourceid();
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waf_format.Waf_Format.resourceId)
}
inline ::std::string* Waf_Format::mutable_resourceid() {
  set_has_resourceid();
  // @@protoc_insertion_point(field_mutable:waf_format.Waf_Format.resourceId)
  return resourceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Waf_Format::release_resourceid() {
  // @@protoc_insertion_point(field_release:waf_format.Waf_Format.resourceId)
  clear_has_resourceid();
  return resourceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Waf_Format::set_allocated_resourceid(::std::string* resourceid) {
  if (resourceid != NULL) {
    set_has_resourceid();
  } else {
    clear_has_resourceid();
  }
  resourceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourceid);
  // @@protoc_insertion_point(field_set_allocated:waf_format.Waf_Format.resourceId)
}

// optional string operationName = 2;
inline bool Waf_Format::has_operationname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Waf_Format::set_has_operationname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Waf_Format::clear_has_operationname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Waf_Format::clear_operationname() {
  operationname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operationname();
}
inline const ::std::string& Waf_Format::operationname() const {
  // @@protoc_insertion_point(field_get:waf_format.Waf_Format.operationName)
  return operationname_.GetNoArena();
}
inline void Waf_Format::set_operationname(const ::std::string& value) {
  set_has_operationname();
  operationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waf_format.Waf_Format.operationName)
}
#if LANG_CXX11
inline void Waf_Format::set_operationname(::std::string&& value) {
  set_has_operationname();
  operationname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waf_format.Waf_Format.operationName)
}
#endif
inline void Waf_Format::set_operationname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_operationname();
  operationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waf_format.Waf_Format.operationName)
}
inline void Waf_Format::set_operationname(const char* value, size_t size) {
  set_has_operationname();
  operationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waf_format.Waf_Format.operationName)
}
inline ::std::string* Waf_Format::mutable_operationname() {
  set_has_operationname();
  // @@protoc_insertion_point(field_mutable:waf_format.Waf_Format.operationName)
  return operationname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Waf_Format::release_operationname() {
  // @@protoc_insertion_point(field_release:waf_format.Waf_Format.operationName)
  clear_has_operationname();
  return operationname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Waf_Format::set_allocated_operationname(::std::string* operationname) {
  if (operationname != NULL) {
    set_has_operationname();
  } else {
    clear_has_operationname();
  }
  operationname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operationname);
  // @@protoc_insertion_point(field_set_allocated:waf_format.Waf_Format.operationName)
}

// optional string category = 3;
inline bool Waf_Format::has_category() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Waf_Format::set_has_category() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Waf_Format::clear_has_category() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Waf_Format::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category();
}
inline const ::std::string& Waf_Format::category() const {
  // @@protoc_insertion_point(field_get:waf_format.Waf_Format.category)
  return category_.GetNoArena();
}
inline void Waf_Format::set_category(const ::std::string& value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waf_format.Waf_Format.category)
}
#if LANG_CXX11
inline void Waf_Format::set_category(::std::string&& value) {
  set_has_category();
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waf_format.Waf_Format.category)
}
#endif
inline void Waf_Format::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waf_format.Waf_Format.category)
}
inline void Waf_Format::set_category(const char* value, size_t size) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waf_format.Waf_Format.category)
}
inline ::std::string* Waf_Format::mutable_category() {
  set_has_category();
  // @@protoc_insertion_point(field_mutable:waf_format.Waf_Format.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Waf_Format::release_category() {
  // @@protoc_insertion_point(field_release:waf_format.Waf_Format.category)
  clear_has_category();
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Waf_Format::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    set_has_category();
  } else {
    clear_has_category();
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:waf_format.Waf_Format.category)
}

// optional .waf_format.Properties properties = 4;
inline bool Waf_Format::has_properties() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Waf_Format::set_has_properties() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Waf_Format::clear_has_properties() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Waf_Format::clear_properties() {
  if (properties_ != NULL) properties_->Clear();
  clear_has_properties();
}
inline const ::waf_format::Properties& Waf_Format::properties() const {
  const ::waf_format::Properties* p = properties_;
  // @@protoc_insertion_point(field_get:waf_format.Waf_Format.properties)
  return p != NULL ? *p : *reinterpret_cast<const ::waf_format::Properties*>(
      &::waf_format::_Properties_default_instance_);
}
inline ::waf_format::Properties* Waf_Format::release_properties() {
  // @@protoc_insertion_point(field_release:waf_format.Waf_Format.properties)
  clear_has_properties();
  ::waf_format::Properties* temp = properties_;
  properties_ = NULL;
  return temp;
}
inline ::waf_format::Properties* Waf_Format::mutable_properties() {
  set_has_properties();
  if (properties_ == NULL) {
    properties_ = new ::waf_format::Properties;
  }
  // @@protoc_insertion_point(field_mutable:waf_format.Waf_Format.properties)
  return properties_;
}
inline void Waf_Format::set_allocated_properties(::waf_format::Properties* properties) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete properties_;
  }
  if (properties) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      properties = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    set_has_properties();
  } else {
    clear_has_properties();
  }
  properties_ = properties;
  // @@protoc_insertion_point(field_set_allocated:waf_format.Waf_Format.properties)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace waf_format

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::waf_format::Properties_ActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::waf_format::Properties_ActionType>() {
  return ::waf_format::Properties_ActionType_descriptor();
}
template <> struct is_proto_enum< ::waf_format::Properties_SiteType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::waf_format::Properties_SiteType>() {
  return ::waf_format::Properties_SiteType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_waf_5fformat_2eproto__INCLUDED
